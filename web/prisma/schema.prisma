// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model corresponding to User interface
model User {
  id                String     @id @default(uuid())
  walletAddress     String     @unique // Solana wallet address (as string)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Relationships
  userBets          UserBet[]  // User's bets
  createdBets       Bet[]      // Bets created by this user
  
  @@index([walletAddress])
}

// Bet model corresponding to BetState interface
model Bet {
  id                String     @id @default(uuid())
  betPublicKey      String     @unique // Solana public key for the bet account
  creatorId         String     // Reference to creator's id
  creator           User       @relation(fields: [creatorId], references: [id])
  escrowAccount     String     // Solana public key for escrow
  totalPool         String     // BigInt as string
  yesPool           String     // BigInt as string
  noPool            String     // BigInt as string
  expiresAt         DateTime   // Converted from Unix timestamp
  status            BetStatus  @default(ACTIVE)
  outcome           BetOutcome?
  minBetAmount      String     // BigInt as string
  maxBetAmount      String     // BigInt as string
  title             String     // Add this field
  description       String     // Add this field  
  category          String     // Add this field
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Relationships
  userBets          UserBet[]  // All user bets on this bet
  
  @@index([creatorId])
  @@index([status])
  @@index([expiresAt])
}

// UserBet model corresponding to UserBet interface
model UserBet {
  id                String     @id @default(uuid())
  userId            String
  user              User       @relation(fields: [userId], references: [id])
  betId             String
  bet               Bet        @relation(fields: [betId], references: [id])
  betPublicKey      String     // Public key for the bet account
  userBetPublicKey  String     // Public key for this user's bet PDA
  amount            String     // BigInt as string
  position          BetOutcome
  isClaimed         Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  @@unique([userId, betId])
  @@index([userId])
  @@index([betId])
  @@index([userBetPublicKey])
}

// Enum for BetStatus (matching your type definition)
enum BetStatus {
  ACTIVE
  CLOSED
  RESOLVED
  DISPUTED
}

// Enum for BetOutcome (matching your type definition)
enum BetOutcome {
  YES
  NO
}
